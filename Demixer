import os
import torchaudio
import torch

# Caricamento del modello HDEMUCS
bundle = torchaudio.pipelines.HDEMUCS_HIGH_MUSDB_PLUS
model = bundle.get_model()
sample_rate = bundle.sample_rate

# Impostazione del dispositivo (GPU se disponibile, altrimenti CPU o MPS per macOS)
device = torch.device("cpu")
model.to(device)

def separate_and_save_sources(
    model,
    audio_path,
    sample_rate,
    device=None,
):
    """
    Separare le 4 tracce (stems) da un file audio e salvarle come file WAV separati.
    
    Args:
        model: Il modello di separazione delle fonti.
        audio_path: Il percorso del file audio .wav di input.
        sample_rate: Frequenza di campionamento dell'audio.
        device: Dispositivo su cui eseguire il modello (CPU o GPU).
    """
    
    # Carica il file audio
    waveform, sr = torchaudio.load(audio_path)
    
    # Se la frequenza di campionamento non corrisponde, effettua il resampling
    if sr != sample_rate:
        waveform = torchaudio.transforms.Resample(sr, sample_rate)(waveform)
    
    # Imposta il dispositivo (CPU o GPU/MPS)
    if device is None:
        device = torch.device("cuda" if torch.cuda.is_available() else "mps" if torch.backends.mps.is_available() else "cpu")
    waveform = waveform.to(device)
    
    # Separazione delle fonti
    with torch.no_grad():
        out = model(waveform.unsqueeze(0))  # Aggiungiamo una dimensione per il batch (batch_size, channels, samples)
    
    # Estrai le tracce separate
    final = out.squeeze(0)  # Rimuove la dimensione extra del batch
    
    # Ottieni la cartella e il nome del file di input
    base_path, filename = os.path.split(audio_path)
    filename_without_ext = os.path.splitext(filename)[0]
    
    # Salva ogni stem separato come file WAV nella stessa cartella
    for i, source_name in enumerate(model.sources):
        print(f"Salvataggio della traccia separata: {source_name}")
        stem_filename = f"{filename_without_ext}_{source_name}.wav"
        stem_path = os.path.join(base_path, stem_filename)
        
        # Salva la traccia separata come file .wav
        torchaudio.save(stem_path, final[i].cpu(), sample_rate)
        print(f"Salvato {stem_filename} nella cartella {base_path}")

# Esegui la funzione con un percorso di file audio
separate_and_save_sources(model, 'nome della soooong', sample_rate, device)
print("Separazione e salvataggio completati.")
